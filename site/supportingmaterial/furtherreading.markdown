---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: default
redirect_from: /further-reading/
---
# Further Reading Around Facilitating Software Architecture

While there was nothing I could find that dealt solely, or even substantially, with the topic of architectural decisions, there were books which dealt with decisions more broadly, or on deciding in parallel disciplines. These included Joseph Bikart’s [“The Art of Decision Making”](https://amzn.to/3NbI0AD), Daniel Kahneman’s [“Thinking Fast and Slow”](https://amzn.to/3ZSGZVQ) and, most substantially, the previously mentioned [“The Principles of Product Development Flow”](https://amzn.to/3BxFOBb) by Don Reinertsen. Alongside these, others provided additional color, light and shade. [“Working Backwards”](https://amzn.to/3Y9Np1q) by Colin Bryar and Bill Carr was one such source, as was [“The Art of Scalability”](https://amzn.to/4eP9zM5) by Michael L. Abbot and Martin T. Fisher. 

More general sources of inspiration when it comes to creativity in (technical) deciding, I have taken a lot from the TV show [Halt and Catch Fire](https://www.imdb.com/title/tt2543312/) (All five series contained loads of great examples). I also found inspiration in the Netflix Series about Spotify, [The Playlist](https://www.netflix.com/title/81186296). Books of technical history can also prove inspirational such as [Where Wizards Stay Up Late](https://amzn.to/3BxG3MB) by Katie Hafner and Matthew Lyon (about the creation of the internet), Michael A. Hiltik's [Dealers of Lightning](https://amzn.to/3YbHskP) (about Xerox PARC), [Turing’s Cathedral](https://amzn.to/3BveJP7) by George Dyson (about the Institute for Advanced Study at Princeton), and Petzold's [Code](https://amzn.to/4eAWqqb) (about the development of software and hardware in general)

Blog posts, especially engineering blogs by companies such as [Netflix](https://netflixtechblog.com), [Facebook](https://engineering.fb.com), [Github](https://github.com/category/engineering), [LinkedIn](https://engineering.linkedin.com/blog), [Spotify](https://engineering.atspotify.com/) and [Etsy](https://codeascraft.com/) are also incredibly inspirational. Conference talks can also contain a great deal of things to think about. My personal favorites are Adrian Cockroft’s, but I’ve also been inspired by technical breakdowns by Catie McCaffery, Alice Goldfuss and Valentina Servile (google them for their latest) and public post-mortem posts can also be incredibly insightful. Knowing why something worked is great, but knowing the challenges it overcame, including the downsides which resulted, and perhaps even how things ultimately failed are even more enlightening.

I’ve also been surprised to stumble across essays like famous film director, Alexander Mackenderick’s “A Technique for Having Ideas” in his book ["On Film-Making"](https://amzn.to/3TVyhm6) which is remarkably down to earth and practical (Step 1: Collecting Data. Step 2: Organizing the Data. Step 3: Incubating the Material. Step 4: Preserving the Spark.) There is also Brian Eno and Peter’s Schmidt’s card-based method for promoting creativity, [Oblique Strategies.](https://www.enoshop.co.uk/product/oblique-strategies.html) (You draw a card which has a challenge on it. For example: “What to increase? What to decrease?” and “Try faking it!”). There is even a mobile app.

The more general architectural works are also very inpiring. Christopher Alexander's [A Pattern Language](https://amzn.to/3zHg84t),  [The Timeless Way of Building](https://amzn.to/4erB9PC) and [Notes on the Synthesis of Form](https://amzn.to/4evbLbQ). There is also Gregor Hohpe's [The Software Architect Elevator](https://amzn.to/3By9ldZ).

As you pratice more and more collective architecture you will become increasingly aware of the sociotechnical systems around you. In order to understand and work with these effectively I strongly recommend Diana Montalion's [Learning Systems Thinking](https://learningsystemsthinking.com/) and Donella Meadow's [Thinking in Systems: A Primer](https://amzn.to/4eukXxb). Books like Matthew Skelton and Manuel Pais' [Team Topologies](https://amzn.to/3NaIhEf) also offer reams of information on how to make various systemic changes. If you really want to get deep you could even dip your toe in [Modern Forms of Laissez Faire Organization](https://www.socialsciencethatactuallyworks.com/_files/ugd/d59011_bbeff0a2ab00446fb7175cee435e60cc.pdf) by Donald W. de Guerre and Merrelyn Emery.

More generally the following books on agile software practices have been incrdibly useful to help me and others get the architecture work down into code: Jeff Patton's [User Story Mapping](https://amzn.to/3Y6T609) as well as [User Stories Applied: For Agile Software Development](https://amzn.to/4dBwuJR) by Mike Cohn. There is also Steve Freeman and Nat Pryce's [Growing Object-Oriented Software, Guided by Tests](https://amzn.to/47W6QOt)

With regards to strategy I've found Simon Wardleys [Wardley Mapping blog posts](https://github.com/andrewharmellaw/wardley-maps-book/releases/tag/0.19.2) to contain a lot of wisdom and also [Holacracy: The New Management System for a Rapidly Changing World](https://amzn.to/3XU2bYN) by Brian J Robertson; and (Henry Holt and Co, 2015). Additional thinking about strategy can be found in [Enterprise Architecture as Strategy: Creating a Foundation for Business Execution](https://amzn.to/4eQ0Kl1) by Jeanne W. Ross, Peter Weill, and David Robertson (Harvard Business Review Press, 2006), [Open Group Agile Architecture sections on Strategy](https://pubs.opengroup.org/architecture/o-aa-standard/agile-strategy.html), and [Good Strategy Bad Strategy: The Difference and Why It Matters](https://amzn.to/4etvAAp) by Richard P. Rumelt (Profile Books, 2011). Roger L. Martin's article “[The First Question to Ask of Any Strategy](https://hbr.org/2015/05/the-first-question-to-ask-of-any-strategy)” is also enlightening.

More generally to support your decentralized architecture practice, I’d encourage you to take a look at [Agile Retrospectives](https://amzn.to/3YbGx3G) by Esther Derby and Diana Larsen but with a specific focus on the key aspects of empathy and honesty to really get down to underlying, often societal, problems that Sophia Katsaouni pulls out in her Newcrafts Paris 2024 talk “[Bring Meaning back to your Retrospectives (No Matter Your Role)](https://vimeo.com/949430622 )”. 

Other tools I’ve used to great success have been many of the practices described in Evelyn van Kelle, Gien Verschatse, and Kenny Baas-Schwegler in their book [Collaborative Software Design](https://amzn.to/3TSjc4w); specifically the chapters “The Influence of Ranking”, “The Impact and Opportunities of Cognitive Bias” and “Resistance and Conflict Resolution”. There is also a great deal in Jitske Kramer’s [Jam Cultures](https://amzn.to/3BvtNMp) that I had no space to fit in. The same goes for [Turn the Ship Around!](https://amzn.to/4euvbgT) and the classic [The Fifth Dicsipline: The Art and Practice of the Learning Organization](https://amzn.to/3Y9AXPf) by Peter M. Senge. Finally, I’ve had great support with [Team Canvasses](https://theteamcanvas.com/), and Heidi Helfand’s [Dynamic Reteaming](https://amzn.to/47PTZO5) also has many great tips and tricks. 

Finally, although its really hard to get a hold of, [Patterns of Anarchy](https://amzn.to/3Ncojsx) edited by Leonard Krimerman and Lewis Perry opened my mind to many things.
